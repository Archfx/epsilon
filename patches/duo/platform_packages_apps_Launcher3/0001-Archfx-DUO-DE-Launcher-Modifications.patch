From 550671e384eb91080a8df02694adf04abeaa6c08 Mon Sep 17 00:00:00 2001
From: Archfx <cybx@live.com>
Date: Tue, 7 Jan 2025 13:57:55 -0500
Subject: [PATCH] Archfx DUO-DE Launcher Modifications

Change-Id: I6fd513dede9cfc80993613ac760f78ad72568237
---
 AndroidManifest.xml                           |  8 +++
 .../res/xml/indexable_launcher_prefs.xml      |  2 +-
 res/values/strings.xml                        |  5 ++
 res/xml/launcher_preferences.xml              | 19 +++++-
 src/com/android/launcher3/DeviceProfile.java  | 10 ++-
 .../android/launcher3/LauncherAppState.java   | 19 ++++++
 .../allapps/AllAppsTransitionController.java  | 23 +++++++
 .../touch/WorkspaceTouchListener.java         | 56 ++++++++++++++++
 .../util/ActivityOptionsWrapper.java          | 65 +++++++++++++++++++
 .../launcher3/views/ActivityContext.java      |  3 +
 10 files changed, 206 insertions(+), 4 deletions(-)

diff --git a/AndroidManifest.xml b/AndroidManifest.xml
index 89291c1ff9..1317970450 100644
--- a/AndroidManifest.xml
+++ b/AndroidManifest.xml
@@ -72,5 +72,13 @@
                 android:value="${packageName}.grid_control" />
         </activity>

+        <!-- Receiver for restart intent by Archfx -->
+        <receiver android:name=".RestartReceiver"
+            android:exported="true">
+        <intent-filter>
+             <action android:name="com.thain.duo.LAUNCHER_RESTART" />
+         </intent-filter>
+        </receiver>
+
     </application>
 </manifest>
diff --git a/quickstep/res/xml/indexable_launcher_prefs.xml b/quickstep/res/xml/indexable_launcher_prefs.xml
index b4740e5b51..aa1fd4d461 100644
--- a/quickstep/res/xml/indexable_launcher_prefs.xml
+++ b/quickstep/res/xml/indexable_launcher_prefs.xml
@@ -26,7 +26,7 @@
         android:key="pref_allowRotation"
         android:title="@string/allow_rotation_title"
         android:summary="@string/allow_rotation_desc"
-        android:defaultValue="false"
+        android:defaultValue="true"
         android:persistent="true" />

 </PreferenceScreen>
diff --git a/res/values/strings.xml b/res/values/strings.xml
index 9d0602169c..49f214531a 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -510,4 +510,9 @@
     <string name="ps_add_button_label">Install</string>
     <!-- Content description for install app icon -->
     <string name="ps_add_button_content_description">Install apps to Private Space</string>
+    <!-- DUO-DE Strings for the app launch mode -->
+    <string name="allow_freeform_mode_tablet">Tablet Mode Floating Windows</string>
+    <string name="allow_freeform_mode_tablet_desc">Enable desktop mode in Book and Slate Postures</string>
+    <string name="allow_freeform_mode_phone">Phone Mode Floating Windows</string>
+    <string name="allow_freeform_mode_phone_desc">Enable desktop mode in Tent, Ramp, and Brochure Postures</string>
 </resources>
diff --git a/res/xml/launcher_preferences.xml b/res/xml/launcher_preferences.xml
index 284ab9e718..9e89b83a41 100644
--- a/res/xml/launcher_preferences.xml
+++ b/res/xml/launcher_preferences.xml
@@ -45,9 +45,26 @@
         android:key="pref_allowRotation"
         android:title="@string/allow_rotation_title"
         android:summary="@string/allow_rotation_desc"
-        android:defaultValue="false"
+        android:defaultValue="true"
         android:persistent="true"
         launcher:logIdOn="615"
         launcher:logIdOff="616" />

+    <SwitchPreference
+        android:key="allow_freeform_mode_tablet"
+        android:title="@string/allow_freeform_mode_tablet"
+        android:defaultValue="true"
+        android:persistent="true"
+        android:summary="@string/allow_freeform_mode_tablet_desc"
+         />
+
+    <SwitchPreference
+        android:key="allow_freeform_mode_phone"
+        android:title="@string/allow_freeform_mode_phone"
+        android:defaultValue="false"
+        android:persistent="true"
+        android:summary="@string/allow_freeform_mode_phone_desc"
+        />
+
+
 </androidx.preference.PreferenceScreen>
diff --git a/src/com/android/launcher3/DeviceProfile.java b/src/com/android/launcher3/DeviceProfile.java
index 483f5f84d2..68fcdbc608 100644
--- a/src/com/android/launcher3/DeviceProfile.java
+++ b/src/com/android/launcher3/DeviceProfile.java
@@ -74,6 +74,8 @@ import java.io.PrintWriter;
 import java.util.Locale;
 import java.util.function.Consumer;

+import com.android.quickstep.util.TriggerSwipeUpTouchTracker;
+
 @SuppressLint("NewApi")
 public class DeviceProfile {

@@ -828,8 +830,12 @@ public class DeviceProfile {
         }

         if (isTablet) {
-            allAppsPadding.top = mInsets.top;
-            allAppsShiftRange = heightPx;
+            float allAppsHeightScale = 0.7f;
+            if (widthPx > 2500) {
+                allAppsHeightScale = 0.95f;
+            }
+            allAppsPadding.top = (heightPx > 1400) ? ((int) Math.round(heightPx * (1 - allAppsHeightScale))) : mInsets.top;
+            allAppsShiftRange = (heightPx > 1400) ? ((int) Math.round(heightPx * (allAppsHeightScale))) : heightPx;
         } else {
             allAppsPadding.top = 0;
             allAppsShiftRange =
diff --git a/src/com/android/launcher3/LauncherAppState.java b/src/com/android/launcher3/LauncherAppState.java
index 15641ab516..02ee22eb1e 100644
--- a/src/com/android/launcher3/LauncherAppState.java
+++ b/src/com/android/launcher3/LauncherAppState.java
@@ -92,6 +92,14 @@ public class LauncherAppState implements SafeCloseable {
         return mContext;
     }

+    public void restartLauncher(Context context) {
+        // Restart the launcher
+        MODEL_EXECUTOR.execute(() -> {
+            android.os.Process.killProcess(android.os.Process.myPid());
+       });
+        Log.d("RestartReceiver by Archfx", "Launcher restarted.");
+    }
+
     @SuppressWarnings("NewApi")
     public LauncherAppState(Context context) {
         this(context, LauncherFiles.APP_ICONS_DB);
@@ -106,6 +114,17 @@ public class LauncherAppState implements SafeCloseable {
             }
         });

+        // Add RestartReceiver to listen for restart intent
+        SimpleBroadcastReceiver restartReceiver = new SimpleBroadcastReceiver(UI_HELPER_EXECUTOR, intent -> {
+            if ("com.thain.duo.LAUNCHER_RESTART".equals(intent.getAction())) {
+                Log.d("RestartReceiver by Archfx", "Received broadcast to restart the launcher.");
+                restartLauncher(context);
+            }
+        });
+        mContext.registerReceiver(restartReceiver, new IntentFilter("com.thain.duo.LAUNCHER_RESTART"),
+                            RECEIVER_EXPORTED);
+        mOnTerminateCallback.add(() -> mContext.unregisterReceiver(restartReceiver));
+
         ModelLauncherCallbacks callbacks = mModel.newModelCallbacks();
         LauncherApps launcherApps = mContext.getSystemService(LauncherApps.class);
         launcherApps.registerCallback(callbacks);
diff --git a/src/com/android/launcher3/allapps/AllAppsTransitionController.java b/src/com/android/launcher3/allapps/AllAppsTransitionController.java
index c6852e015c..f849c951f2 100644
--- a/src/com/android/launcher3/allapps/AllAppsTransitionController.java
+++ b/src/com/android/launcher3/allapps/AllAppsTransitionController.java
@@ -65,6 +65,13 @@ import com.android.launcher3.util.Themes;
 import com.android.launcher3.util.VibratorWrapper;
 import com.android.launcher3.views.ScrimView;

+import com.android.launcher3.allapps.ActivityAllAppsContainerView;
+import com.android.launcher3.R;
+import android.widget.FrameLayout;
+import android.view.ViewGroup;
+import android.content.Context;
+import android.widget.RelativeLayout;
+
 /**
  * Handles AllApps view transition.
  * 1) Slides all apps view using direct manipulation
@@ -218,6 +225,22 @@ public class AllAppsTransitionController
         }

         mIsTablet = dp.isTablet;
+        if (mLauncher.getStateManager().getState() == ALL_APPS) {
+            resetAllAppsMargins();
+        }
+    }
+
+    private void resetAllAppsMargins() {
+        ActivityAllAppsContainerView<Launcher> mAppsView = mLauncher.findViewById(R.id.apps_view);
+        View mBottomSheetBackground = mLauncher.findViewById(R.id.bottom_sheet_background);
+        FrameLayout.LayoutParams params = (FrameLayout.LayoutParams) mAppsView.getLayoutParams();
+        RelativeLayout.LayoutParams backgroundParams = (RelativeLayout.LayoutParams) mBottomSheetBackground.getLayoutParams();
+        params.width = ViewGroup.LayoutParams.MATCH_PARENT; // Full width
+        params.height = ViewGroup.LayoutParams.MATCH_PARENT; // Full height
+        backgroundParams.leftMargin = 0;
+        backgroundParams.rightMargin = 0;
+        mAppsView.setLayoutParams(params);
+        mBottomSheetBackground.setLayoutParams(backgroundParams);
     }

     /**
diff --git a/src/com/android/launcher3/touch/WorkspaceTouchListener.java b/src/com/android/launcher3/touch/WorkspaceTouchListener.java
index 0ff10c26a5..062923fa8a 100644
--- a/src/com/android/launcher3/touch/WorkspaceTouchListener.java
+++ b/src/com/android/launcher3/touch/WorkspaceTouchListener.java
@@ -47,6 +47,17 @@ import com.android.launcher3.logger.LauncherAtom;
 import com.android.launcher3.testing.TestLogging;
 import com.android.launcher3.testing.shared.TestProtocol;
 import com.android.launcher3.util.TouchUtil;
+import com.android.launcher3.allapps.ActivityAllAppsContainerView;
+import com.android.launcher3.R;
+import android.widget.FrameLayout;
+import android.view.ViewGroup;
+import android.view.Gravity;
+import android.content.Context;
+import android.view.WindowManager;
+
+import android.util.DisplayMetrics;
+import android.widget.FrameLayout;
+import android.widget.RelativeLayout;

 /**
  * Helper class to handle touch on empty space in workspace and show options popup on long press
@@ -92,6 +103,9 @@ public class WorkspaceTouchListener extends GestureDetector.SimpleOnGestureListe
         if (action == ACTION_DOWN) {
             // Check if we can handle long press.
             boolean handleLongPress = canHandleLongPress();
+            boolean isXTouch = (ev.getX() < 1344) ? false : true;
+            mLauncher.getDeviceProfile().initialX = isXTouch;
+            alignAllApps(isXTouch);

             if (handleLongPress) {
                 // Check if the event is not near the edges
@@ -187,6 +201,48 @@ public class WorkspaceTouchListener extends GestureDetector.SimpleOnGestureListe
                 && mLauncher.isInState(NORMAL);
     }

+    private void alignAllApps(boolean initialX) {
+         WindowManager windowManager = (WindowManager) mLauncher.getSystemService(Context.WINDOW_SERVICE);
+         DisplayMetrics displayMetrics = new DisplayMetrics();
+         windowManager.getDefaultDisplay().getMetrics(displayMetrics);
+         int screenWidth = displayMetrics.widthPixels;
+
+         ActivityAllAppsContainerView<Launcher> mAppsView = mLauncher.findViewById(R.id.apps_view);
+         View mBottomSheetBackground = mLauncher.findViewById(R.id.bottom_sheet_background);
+         // Adjust the layout parameters of mBottomSheetBackground based on the left margin
+         FrameLayout.LayoutParams params = (FrameLayout.LayoutParams) mAppsView.getLayoutParams();
+         RelativeLayout.LayoutParams backgroundParams = (RelativeLayout.LayoutParams) mBottomSheetBackground.getLayoutParams();
+
+         if (screenWidth>2500) {
+             // Set the desired width and height dynamically
+             params.width = (screenWidth / 2)-5; // Half of the screen width
+             // Align to right or left based on initialX
+             if (initialX) {
+                 params.gravity = Gravity.END;
+                 backgroundParams.leftMargin = (screenWidth / 2) + 5;
+                 backgroundParams.rightMargin = -(screenWidth / 2);
+             } else {
+                 params.gravity = Gravity.START;
+                 backgroundParams.leftMargin = 0;
+                 backgroundParams.rightMargin = 0;
+             }
+
+             int topPadding = mAppsView.getPaddingTop();
+             int bottomPadding = mAppsView.getPaddingBottom();
+             mAppsView.setPadding(10, topPadding, 10, bottomPadding);
+         }
+         else {
+             params.width = ViewGroup.LayoutParams.MATCH_PARENT; // Full width
+             params.height = ViewGroup.LayoutParams.MATCH_PARENT; // Full height
+             backgroundParams.leftMargin = 0;
+             backgroundParams.rightMargin = 0;
+         }
+
+         // Apply the new layout parameters to the view
+         mAppsView.setLayoutParams(params);
+         mBottomSheetBackground.setLayoutParams(backgroundParams);
+    }
+
     private void cancelLongPress() {
         mLongPressState = STATE_CANCELLED;
     }
diff --git a/src/com/android/launcher3/util/ActivityOptionsWrapper.java b/src/com/android/launcher3/util/ActivityOptionsWrapper.java
index 17ff2a96b7..1dd226c079 100644
--- a/src/com/android/launcher3/util/ActivityOptionsWrapper.java
+++ b/src/com/android/launcher3/util/ActivityOptionsWrapper.java
@@ -15,10 +15,24 @@
  */
 package com.android.launcher3.util;

+import static com.android.launcher3.LauncherState.NORMAL;

 import android.app.ActivityOptions;
 import android.os.Bundle;

+import com.android.launcher3.LauncherFiles;
+import android.os.Build;
+import android.graphics.Rect;
+import java.lang.reflect.Method;
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.content.SharedPreferences.OnSharedPreferenceChangeListener;
+import com.android.launcher3.DeviceProfile;
+import com.android.launcher3.views.ActivityContext;
+
+import com.android.launcher3.Launcher;
+import com.android.quickstep.util.TriggerSwipeUpTouchTracker;
+
 /**
  * A wrapper around {@link ActivityOptions} to allow custom functionality in launcher
  */
@@ -27,6 +41,7 @@ public class ActivityOptionsWrapper {
     public final ActivityOptions options;
     // Called when the app launch animation is complete
     public final RunnableList onEndCallback;
+    private Context context;

     public ActivityOptionsWrapper(ActivityOptions options, RunnableList onEndCallback) {
         this.options = options;
@@ -37,6 +52,56 @@ public class ActivityOptionsWrapper {
      * @see {@link ActivityOptions#toBundle()}
      */
     public Bundle toBundle() {
+
+        String mode = "freeform";
+        int windowMode;
+        Boolean isTabletMode = ActivityContext.lookupContext(this.context).getDeviceProfile().isTablet;
+        int widthPx = ActivityContext.lookupContext(this.context).getDeviceProfile().widthPx;
+        Boolean initialX = ActivityContext.lookupContext(this.context).getDeviceProfile().initialX;
+
+        int xValue = (initialX == true && isTabletMode && widthPx>2500) ? 1394 : 50;
+        Rect rect = new Rect(xValue, 120, 1244 + xValue , 1710);
+
+        if (this.context != null) {
+            SharedPreferences pref = this.context.getSharedPreferences(LauncherFiles.SHARED_PREFERENCES_KEY, Context.MODE_PRIVATE);
+
+            Boolean freeformTablet = pref.getBoolean("allow_freeform_mode_tablet", true);
+            Boolean freeformPhone = pref.getBoolean("allow_freeform_mode_phone", false);
+
+            if (!isTabletMode) {
+                if (freeformPhone) mode = "freeform";
+                else mode = "fullscreen";
+            } else {
+                if (freeformTablet) mode = "freeform";
+                else mode = "fullscreen";
+            }
+        }
+
+        if (mode.equals("fullscreen")) {
+            windowMode = 1;
+        } else {
+            windowMode = (Build.VERSION.SDK_INT >= 28) ? 5 : 2;
+            options.setLaunchBounds(rect);
+
+            if (context instanceof Launcher) {
+                Launcher launcher = (Launcher) context;
+                launcher.getStateManager().goToState(NORMAL);
+            }
+        }
+
+        String methodName = (Build.VERSION.SDK_INT >= 28) ? "setLaunchWindowingMode" : "setLaunchStackId";
+
+        try {
+            Method method = ActivityOptions.class.getMethod(methodName, int.class);
+            method.invoke(options, windowMode);
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+
         return options.toBundle();
     }
+
+    public void setWrapperContext(Context context) {
+        this.context = context;
+    }
 }
diff --git a/src/com/android/launcher3/views/ActivityContext.java b/src/com/android/launcher3/views/ActivityContext.java
index d3160e0db3..c587347cd1 100644
--- a/src/com/android/launcher3/views/ActivityContext.java
+++ b/src/com/android/launcher3/views/ActivityContext.java
@@ -362,6 +362,8 @@ public interface ActivityContext {
     default RunnableList sendPendingIntentWithAnimation(
             @NonNull View v, PendingIntent intent, @Nullable ItemInfo item) {
         ActivityOptionsWrapper options = getActivityLaunchOptions(v, item);
+        Context context = (Context) this;
+        options.setWrapperContext(context);
         try {
             intent.send(null, 0, null, null, null, null, options.toBundle());
             if (item != null) {
@@ -406,6 +408,7 @@ public interface ActivityContext {
                 : makeDefaultActivityOptions(item != null && item.animationType == DEFAULT_NO_ICON
                         ? SPLASH_SCREEN_STYLE_SOLID_COLOR : -1 /* SPLASH_SCREEN_STYLE_UNDEFINED */);
         UserHandle user = item == null ? null : item.user;
+        options.setWrapperContext(context);
         Bundle optsBundle = options.toBundle();
         // Prepare intent
         intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
--
2.34.1

